{"version":3,"sources":["../node_modules/lodash/max.js","views/Home/hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","hooks/api.ts","hooks/useIntersectionObserver.ts","views/Home/components/EarnAPRCard.tsx","views/Home/hooks/useFetchLotteryForPromos.ts","views/Home/Home.tsx","hooks/useTokenBalance.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"names":["baseExtremum","require","baseGt","identity","module","exports","array","length","undefined","useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWeb3React","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","CardValue","value","decimals","fontSize","lineHeight","prefix","bold","color","useCountUp","start","end","duration","separator","countUp","update","updateValue","useRef","current","style","CardBusdValue","props","Block","styled","div","CakeHarvestBalance","farmsWithBalance","t","useTranslation","earningsSum","reduce","accum","earning","earningNumber","eq","DEFAULT_TOKEN_DECIMAL","toNumber","cakePriceBusd","usePriceCakeBusd","earningsBusd","multipliedBy","gt","CakeWalletBalance","cakeBalance","useTokenBalance","getCakeAddress","busdBalance","getBalanceNumber","StyledFarmStakingCard","Card","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","useToast","toastSuccess","toastError","masterChefContract","useMasterchef","balancesWithValue","filter","balanceType","harvestAllFarms","useCallback","farmWithBalance","harvestFarm","symbol","scale","mb","src","alt","width","height","id","disabled","onClick","count","UnlockButton","StyledCakeStats","Row","CakeStats","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","cakeSupply","StyledTotalValueLockedCard","TotalValueLockedCard","data","setData","fetch","response","json","responseData","console","error","fetchData","useGetStats","tvl","toLocaleString","maximumFractionDigits","useIntersectionObserver","observerRef","observerIsSet","setObserverIsSet","isIntersecting","setIsIntersecting","IntersectionObserver","entry","rootMargin","threshold","observe","mediaQueries","lg","CardMidContent","Heading","attrs","EarnAPRCard","isFetchingFarmData","setIsFetchingFarmData","farmsLP","useFarms","cakePrice","dispatch","useAppDispatch","fetchFarmsPublicDataAsync","nonArchivedFarms","nonArchivedFarm","fetchFarmData","highestApr","useMemo","aprs","multiplier","lpTotalInQuoteToken","quoteToken","busdPrice","totalLiquidity","times","getFarmApr","poolWeight","lpAddresses","ChainId","MAINNET","cakeRewardsApr","lpRewardsApr","maxApr","max","aprText","split","earnUpTo","InFarms","exact","activeClassName","to","animation","variant","ref","justifyContent","mt","useFetchLotteryForPromos","slowRefresh","lotteryId","setLotteryId","currentLotteryPrize","setCurrentLotteryPrize","fetchCurrentLotteryIdAndMaxBuy","currentLotteryId","fetchCurrentID","fetchLottery","amountCollectedInCake","fetchCurrentLotteryPrize","Hero","Cards","BaseLayout","sm","Home","Page","as","FarmStakingCard","FetchStatus","setTotalSupply","cakeContract","getCakeContract","supply","toString","fetchTotalSupply","tokenAddress","BIG_ZERO","setBalance","contract","getBep20Contract","balanceOf","res","fetchBalance","useGetBnbBalance","useLastUpdated","lastUpdated","setLastUpdated","simpleRpcProvider","getBalance","walletBalance","refresh","NOT_FETCHED","SUCCESS","FAILED","fetchStatus","balanceState","setBalanceState","prev","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","i","F","s","n","done","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2"],"mappings":"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","file":"static/js/16.9d9d6ec6.chunk.js","sourcesContent":["var baseExtremum = require('./_baseExtremum'),\n    baseGt = require('./_baseGt'),\n    identity = require('./identity');\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nmodule.exports = max;\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from 'hooks/useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@siacashcoin/uikit'\n\nexport interface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  lineHeight?: string\n  prefix?: string\n  bold?: boolean\n  color?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({\n  value,\n  decimals,\n  fontSize = '40px',\n  lineHeight = '1',\n  prefix = '',\n  bold = true,\n  color = 'text',\n}) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport CardValue, { CardValueProps } from './CardValue'\n\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\n  return (\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\n  )\n}\n\nexport default CardBusdValue\n","import React from 'react'\nimport { Text } from '@siacashcoin/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { FarmWithBalance } from 'views/Home/hooks/useFarmsWithBalance'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport styled from 'styled-components'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n`\n\ninterface CakeHarvestBalanceProps {\n  farmsWithBalance: FarmWithBalance[]\n}\n\nconst CakeHarvestBalance: React.FC<CakeHarvestBalanceProps> = ({ farmsWithBalance }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const earningsSum = farmsWithBalance.reduce((accum, earning) => {\n    const earningNumber = new BigNumber(earning.balance)\n    if (earningNumber.eq(0)) {\n      return accum\n    }\n    return accum + earningNumber.div(DEFAULT_TOKEN_DECIMAL).toNumber()\n  }, 0)\n  const cakePriceBusd = usePriceCakeBusd()\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(cakePriceBusd).toNumber()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\n        {t('Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <Block>\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\n      {cakePriceBusd.gt(0) && <CardBusdValue value={earningsBusd} />}\n    </Block>\n  )\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@siacashcoin/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { BigNumber } from 'bignumber.js'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst CakeWalletBalance = () => {\n  const { t } = useTranslation()\n  const { balance: cakeBalance } = useTokenBalance(getCakeAddress())\n  const cakePriceBusd = usePriceCakeBusd()\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(cakePriceBusd).toNumber()\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\n        {t('Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <>\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\n      {cakePriceBusd.gt(0) ? <CardBusdValue value={busdBalance} /> : <br />}\n    </>\n  )\n}\n\nexport default CakeWalletBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@siacashcoin/uikit'\nimport { harvestFarm } from 'utils/calls'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport useFarmsWithBalance from 'views/Home/hooks/useFarmsWithBalance'\nimport { useMasterchef } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/cake-bg.svg');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const farmsWithBalance = useFarmsWithBalance()\n  const masterChefContract = useMasterchef()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.gt(0))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    // eslint-disable-next-line no-restricted-syntax\n    for (const farmWithBalance of balancesWithValue) {\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        await harvestFarm(masterChefContract, farmWithBalance.pid)\n        toastSuccess(\n          `${t('Harvested')}!`,\n          t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'SCC' }),\n        )\n      } catch (error) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    }\n    setPendingTx(false)\n  }, [balancesWithValue, masterChefContract, toastSuccess, toastError, t])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {t('Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/cake.svg\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{t('SCC to Harvest')}:</Label>\n          <CakeHarvestBalance farmsWithBalance={balancesWithValue} />\n        </Block>\n        <Block>\n          <Label>{t('SCC in Wallet')}:</Label>\n          <CakeWalletBalance />\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              width=\"100%\"\n            >\n              {pendingTx\n                ? t('Collecting SCC')\n                : t('Harvest all (%count%)', {\n                    count: balancesWithValue.length,\n                  })}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@siacashcoin/uikit'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const { t } = useTranslation()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getCakeAddress()))\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {t('SCC Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{t('Total SCC Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{t('Total SCC Burned')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={burnedBalance} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{t('New SCC/block')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={200} />\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@siacashcoin/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useGetStats } from 'hooks/api'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const { t } = useTranslation()\n  const data = useGetStats()\n  const tvl = data ? data.tvl.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading scale=\"lg\" mb=\"24px\">\n          {t('Total Value Locked (TVL)')}\n        </Heading>\n        {data ? (\n          <>\n            <Heading scale=\"xl\">{`$${tvl}`}</Heading>\n            <Text color=\"textSubtle\">{t('Across all LPs and Syrup Pools')}</Text>\n          </>\n        ) : (\n          <Skeleton height={66} />\n        )}\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import { useEffect, useState } from 'react'\n\n/* eslint-disable camelcase */\nexport interface DeBankTvlResponse {\n  id: string\n  chain: string\n  name: string\n  site_url: string\n  logo_url: string\n  has_supported_portfolio: boolean\n  tvl: number\n}\n\nexport const useGetStats = () => {\n  const [data, setData] = useState<DeBankTvlResponse | null>(null)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://openapi.debank.com/v1/protocol?id=bsc_pancakeswap')\n        const responseData: DeBankTvlResponse = await response.json()\n\n        setData(responseData)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setData])\n\n  return data\n}\n","import { useEffect, useRef, useState } from 'react'\n\nconst useIntersectionObserver = () => {\n  const observerRef = useRef<HTMLDivElement>(null)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n  const [isIntersecting, setIsIntersecting] = useState(false)\n\n  useEffect(() => {\n    const checkObserverIsIntersecting = ([entry]: IntersectionObserverEntry[]) => {\n      setIsIntersecting(entry.isIntersecting)\n    }\n\n    if (!observerIsSet) {\n      const intersectionObserver = new IntersectionObserver(checkObserverIsIntersecting, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      intersectionObserver.observe(observerRef.current)\n      setObserverIsSet(true)\n    }\n  }, [observerIsSet])\n\n  return { observerRef, isIntersecting }\n}\n\nexport default useIntersectionObserver\n","import React, { useEffect, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@siacashcoin/uikit'\nimport { ChainId } from '@pancakeswap/sdk'\nimport max from 'lodash/max'\nimport { NavLink } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { useFarms, usePriceCakeBusd } from 'state/farms/hooks'\nimport { fetchFarmsPublicDataAsync, nonArchivedFarms } from 'state/farms'\nimport { getFarmApr } from 'utils/apr'\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n\n  transition: opacity 200ms;\n  &:hover {\n    opacity: 0.65;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAPRCard = () => {\n  const [isFetchingFarmData, setIsFetchingFarmData] = useState(true)\n  const { t } = useTranslation()\n  const { data: farmsLP } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const { observerRef, isIntersecting } = useIntersectionObserver()\n\n  // Fetch farm data once to get the max APR\n  useEffect(() => {\n    const fetchFarmData = async () => {\n      try {\n        await dispatch(fetchFarmsPublicDataAsync(nonArchivedFarms.map((nonArchivedFarm) => nonArchivedFarm.pid)))\n      } finally {\n        setIsFetchingFarmData(false)\n      }\n    }\n\n    if (isIntersecting) {\n      fetchFarmData()\n    }\n  }, [dispatch, setIsFetchingFarmData, isIntersecting])\n\n  const highestApr = useMemo(() => {\n    if (cakePrice.gt(0)) {\n      const aprs = farmsLP.map((farm) => {\n        // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\n        if (farm.pid !== 0 && farm.multiplier !== '0X' && farm.lpTotalInQuoteToken && farm.quoteToken.busdPrice) {\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n          const { cakeRewardsApr, lpRewardsApr } = getFarmApr(\n            new BigNumber(farm.poolWeight),\n            cakePrice,\n            totalLiquidity,\n            farm.lpAddresses[ChainId.MAINNET],\n          )\n          return cakeRewardsApr + lpRewardsApr\n        }\n        return null\n      })\n\n      const maxApr = max(aprs)\n      return maxApr?.toLocaleString('en-US', { maximumFractionDigits: 2 })\n    }\n    return null\n  }, [cakePrice, farmsLP])\n\n  const aprText = highestApr || '-'\n  const earnAprText = t('Earn up to %highestApr% APR in Farms', { highestApr: aprText })\n  const [earnUpTo, InFarms] = earnAprText.split(aprText)\n\n  return (\n    <StyledFarmStakingCard>\n      <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apr-cta\">\n        <CardBody>\n          <Heading color=\"contrast\" scale=\"lg\">\n            {earnUpTo}\n          </Heading>\n          <CardMidContent color=\"#7645d9\">\n            {highestApr && !isFetchingFarmData ? (\n              `${highestApr}%`\n            ) : (\n              <>\n                <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\n                <div ref={observerRef} />\n              </>\n            )}\n          </CardMidContent>\n          <Flex justifyContent=\"space-between\">\n            <Heading color=\"contrast\" scale=\"lg\">\n              {InFarms}\n            </Heading>\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </Flex>\n        </CardBody>\n      </NavLink>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAPRCard\n","import { useState, useEffect } from 'react'\nimport { fetchCurrentLotteryIdAndMaxBuy, fetchLottery } from 'state/lottery/helpers'\nimport useRefresh from 'hooks/useRefresh'\n\nconst useFetchLotteryForPromos = () => {\n  const { slowRefresh } = useRefresh()\n  const [lotteryId, setLotteryId] = useState<string>(null)\n  const [currentLotteryPrize, setCurrentLotteryPrize] = useState<string>(null)\n\n  useEffect(() => {\n    // get current lottery ID\n    const fetchCurrentID = async () => {\n      const { currentLotteryId } = await fetchCurrentLotteryIdAndMaxBuy()\n      setLotteryId(currentLotteryId)\n    }\n\n    fetchCurrentID()\n  }, [setLotteryId])\n\n  useEffect(() => {\n    // get public data for current lottery\n    const fetchCurrentLotteryPrize = async () => {\n      const { amountCollectedInCake } = await fetchLottery(lotteryId)\n      setCurrentLotteryPrize(amountCollectedInCake)\n    }\n\n    if (lotteryId) {\n      fetchCurrentLotteryPrize()\n    }\n  }, [lotteryId, slowRefresh, setCurrentLotteryPrize])\n\n  return { currentLotteryPrize }\n}\n\nexport default useFetchLotteryForPromos\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@siacashcoin/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Page from 'components/Layout/Page'\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\nimport CakeStats from 'views/Home/components/CakeStats'\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\nimport EarnAPRCard from 'views/Home/components/EarnAPRCard'\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\nimport PredictionPromotionCard from 'views/Home/components/PredictionPromotionCard'\nimport LotteryPromotionCard from 'views/Home/components/LotteryPromotionCard'\nimport LotteryBanner from 'views/Home/components/LotteryBanner'\nimport useFetchLotteryForPromos from 'views/Home/hooks/useFetchLotteryForPromos'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/mobile-bg-scc.png');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/pan-bg2.svg'), url('/images/pan-bg.svg');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 24px;\n  grid-gap: 24px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-bottom: 32px;\n    grid-gap: 32px;\n\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst CTACards = styled(BaseLayout)`\n  align-items: start;\n  margin-bottom: 24px;\n  grid-gap: 24px;\n\n  & > div {\n    grid-column: span 6;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-bottom: 32px;\n    grid-gap: 32px;\n\n    & > div {\n      grid-column: span 4;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const { t } = useTranslation()\n  const { currentLotteryPrize } = useFetchLotteryForPromos()\n\n  return (\n    <>\n      {/* <LotteryBanner currentLotteryPrize={currentLotteryPrize} /> */}\n      <Page>\n        <Hero>\n          <Heading as=\"h1\" scale=\"xl\" mb=\"24px\" color=\"secondary\">\n            {t('SiaCashCoin')}\n          </Heading>\n          <Text>{t('SiaCashCoin is pending migration to Binance Smart Chain!')}</Text>\n          <Text>{t('The new SCC BSC smart contract address is!')}</Text>\n          <Text>{t('0xc26EaFC627624baDf990f8d30116892eD204DB51')}</Text>\n        </Hero>\n        <div>\n          <Cards>\n            <FarmStakingCard />\n            <CakeStats />\n            {/* <PredictionPromotionCard /> */}\n          </Cards>\n          {/* <CTACards>\n            <EarnAPRCard /> */}\n            {/* <EarnAssetCard /> */}\n            {/* <LotteryPromotionCard currentLotteryPrize={currentLotteryPrize} /> */}\n          {/* </CTACards> */}\n          <Cards>\n          \n          \n            <EarnAPRCard />\n            <TotalValueLockedCard />\n            \n          </Cards>\n        </div>\n      </Page>\n    </>\n  )\n}\n\nexport default Home\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { simpleRpcProvider } from 'utils/providers'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      try {\n        const res = await contract.balanceOf(account)\n        setBalanceState({ balance: new BigNumber(res.toString()), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.totalSupply()\n      setTotalSupply(new BigNumber(supply.toString()))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      const res = await contract.balanceOf('0x000000000000000000000000000000000000dEaD')\n      setBalance(new BigNumber(res.toString()))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await simpleRpcProvider.getBalance(account)\n      setBalance(new BigNumber(walletBalance.toString()))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"sourceRoot":""}